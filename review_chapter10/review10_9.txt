1、什么是类？
    类是用户自己定义的类型，对象是类的实例

2、类如何实现抽象、封装和数据隐藏？
    类的本质上就是对数据的一种抽象过程，这种抽象一方面把复杂的数据结构分解为基本数据类型的组合，一方面定义和实现了对复杂数据类型的操作。
    因此，类的定义就是把程序中的数据还原成一种基本数据模型和相应操作方式的抽象化过程。
    C++语言中把类进行了数据封装，从类的外部无法访问类的基本数据，而只能通过类的对象实体和类内的公有成员才能访问，这样类就实现了基本的数据隐藏和封装。

3、对象和类之间的关系是什么？
    类是抽象模型，对象是由类这个数据抽象模型实例化之后创建的真实数据单元。

4、除了类的函数成员是函数之外，类的函数成员与类的数据成员之间的区别还有什么？
    从性质上看，类的数据成员用来描述类的基本数据构成，定义其存储空间和类型；
                而类的函数成员则是类的操作功能的定义。
    从存储上看，类所创建的每个新对象都有自己的存储空间，类的数据成员是每一个对象所独享的，
                而同一个类的所有对象共享同一组函数成员，即每种方法对于所有对象来说只有一个副本。

5、定义一个类来表示银行账户。数据成员包括储户姓名、账号（两者使用字符串表示）和存款。成员函数执行如下操作：
    ·创建一个对象并将其初始化。
    ·显示储户姓名、账号和存款。
    ·存入参数指定的存款。
    ·取出参数指定的存款。

    class BankAccount
    {
        private:
            string name; 
            string accountnumber;
            long double savings;
        
        public:
            BankAccount(const string m_name, const string m_accountnumber, const long double m_savings);
            BankAccount();
            ~BankAccount();
            void show() const;
            void push(long double number);
            void pop(long double number);
    }

6、类的构造函数在何时调用？类的析构函数呢？
    类的构造函数在创建类对象时会被调用，用来初始化对象内的各数据成员。
        创建对象有两种情况：1、直接创建类的变量；2、通过new创建一个动态对象。
    析构函数在类对象被回收、销毁时自动调用。对象被回收、销毁也有两种情况。
        一种是该变量在超过生命周期之后会被自动回收；另一种是动态对象通过delete回收时会自动调用析构函数。

7、给出复习题5中银行账户类的构造函数的代码。
    BankAccount::BankAccount(const string m_name, const string m_accountnumber, const long double m_savings)
    {
        name = m_name;
        accountnumber = m_accountnumber;
        savings = m_savings;
    }

    BankAccount()
    {
        name = "";
        accountnumber = "";
        savings = 0;
    }

8、什么是默认构造函数？拥有默认构造函数有什么好处？
    默认构造函数是指没有参数的构造函数，或者所有参数都有默认值的构造函数。
    默认构造函数能够创建类对象而不用初始化该对象，这种使用形式和基本数据类型类似，能够实现一种更加灵活和安全的对象创建方式。
    如果在定义类时没有定义构造函数，那么系统将会自动创建一个默认构造函数，但是如果用户定义了其他任何一个构造函数，就必须要手动定义一个默认构造函数。

9、修改Stock类的定义（stock20.h中的版本），使之包含返回各个数据成员值的成员函数。注意，返回公司名的成员函数不应为修改数组提供便利，也就是说，不能简单地返回string引用
    #ifndef STOCK20_H__
    #define STOCK20_H__
    #include <string>

    class STOCK20_H__
    {
        private:
            std::string company;
            int shares;
            double share_val;
            double total_val;
            void set_tot() { total_val = shares * share_val;}

        public:
            Stock();
            Stock(const std::string & co, long n = 0, double pr = 0.0);
            ~Stock();
            void buy(long num, double price);
            void sell(long num, double price);
            void update(double price);
            void show() const;
            const Stock & topval(const Stock & s) const;
            int numshares() const { return shares; }
            double share_val() const {return share_val;}
            double total_val() const {return total_val;}
            const string &co_name() const {return company;};
    };

    #endif

10、this和 *this表示什么？
    this本质上是每一个对象本身的地址，而*this则是该对象本身