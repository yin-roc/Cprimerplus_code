1、
//1)、声明函数
//2)、构建函数
//3)、引用函数

2、
//a\    void igor();
//b\    float tofu(int);
//c\    double mpg(double, double);
//d\    long summation(long ar[], int size);
//e\    double doctor(const string str1); 
        double doctor(const char *str1);
//f\    void ofcourse(struct boss boss1);
//g\    struct map{};
        char plot(map * pt);
        char *plot(map *pt);

3\
int num(int ar[], int sizeof(arr), int);
int *(*num[10])(int ar[], int sizeof(arr), int)//err 
//数组名为num，里面一共十个元素，每个元素是一个函数指针，返回类型是int 

4\
int arr[num] = {};
int *arr1 = arr;
int *arr2 = arr + sizeof(arr)
func(int *arr1, int *arr2, int)

void func(int *start, int *(end+1), int)

5\
#include <iostream>

int main()
{
    int arr[20] = {0};
    int n = sizeof(arr); 
    int max = func(arr, n);
}

double func(const double arr, int m)
{
    int i = 0;
    double temp = 0
    for(i = 0; i < n-1; i++)
    {
        if(arr[i] < arr[i+1])
            temp = arr[i+1];
    }
    return temp;
}

6\

7\string类、数组存储

8\  8.cpp

9\

10\
直接把glitz当作函数参数
按值传递，遇到内容比较多，占内存比较大的，影响效率

11、
int func(const char *)
int judge(int (*pt)(const char *))

12\ 12.cpp

13\
void f1(applicant * a);
const char * f2(const applicant * a1, const applicant * a2);

typedef void (*p1)(applicant *);
typedef const char * (*p2)(const applicant *, const applicant *);
p1 ap[5];
p2 (*pa)[10];